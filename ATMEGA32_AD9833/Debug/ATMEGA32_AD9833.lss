
ATMEGA32_AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000015a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074d  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000647  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031c  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000148  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  7a:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Uart_Init>:
    }
}

static void Uart_Init(void)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
  8a:	1b b8       	out	0x0b, r1	; 11
	UBRRL = 3; //115200bps 3(7.3728Mhz)
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0; //115200bps 3(7.3728Mhz)
  90:	10 bc       	out	0x20, r1	; 32
  92:	08 95       	ret

00000094 <Uart_Transmit>:
}

static void Uart_Transmit(char data)
{
    /* Wait for empty transmit buffer */
    while (!( UCSRA & (1<<UDRE)));
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <Uart_Transmit>
    /* Put data into buffer, sends the data */
    UDR = data;
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <Uart_Transmit_Array>:
	UBRRL = 3; //115200bps 3(7.3728Mhz)
	UBRRH = 0; //115200bps 3(7.3728Mhz)
}

static void Uart_Transmit_Array(char *data_ptr, unsigned char length)
{
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	fc 01       	movw	r30, r24
  a6:	d6 2f       	mov	r29, r22
    unsigned char ch;
    for(ch=0;ch<length;ch++)
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	08 c0       	rjmp	.+16     	; 0xbc <Uart_Transmit_Array+0x20>
    {
        Uart_Transmit(*data_ptr++);
  ac:	8f 01       	movw	r16, r30
  ae:	0f 5f       	subi	r16, 0xFF	; 255
  b0:	1f 4f       	sbci	r17, 0xFF	; 255
  b2:	80 81       	ld	r24, Z
  b4:	0e 94 4a 00 	call	0x94	; 0x94 <Uart_Transmit>
}

static void Uart_Transmit_Array(char *data_ptr, unsigned char length)
{
    unsigned char ch;
    for(ch=0;ch<length;ch++)
  b8:	cf 5f       	subi	r28, 0xFF	; 255
    {
        Uart_Transmit(*data_ptr++);
  ba:	f8 01       	movw	r30, r16
}

static void Uart_Transmit_Array(char *data_ptr, unsigned char length)
{
    unsigned char ch;
    for(ch=0;ch<length;ch++)
  bc:	cd 17       	cp	r28, r29
  be:	b0 f3       	brcs	.-20     	; 0xac <Uart_Transmit_Array+0x10>
    {
        Uart_Transmit(*data_ptr++);
    }
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	1f 91       	pop	r17
  c6:	0f 91       	pop	r16
  c8:	08 95       	ret

000000ca <Clear_Tx_Buffer>:
    /* Put data into buffer, sends the data */
    UDR = data;
}
static void Clear_Tx_Buffer(char *buf,unsigned int length)
{
    for(unsigned int i = 0; i < length; i++)
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	06 c0       	rjmp	.+12     	; 0xdc <Clear_Tx_Buffer+0x12>
    {
        buf[i] = 0;
  d0:	fc 01       	movw	r30, r24
  d2:	e2 0f       	add	r30, r18
  d4:	f3 1f       	adc	r31, r19
  d6:	10 82       	st	Z, r1
    /* Put data into buffer, sends the data */
    UDR = data;
}
static void Clear_Tx_Buffer(char *buf,unsigned int length)
{
    for(unsigned int i = 0; i < length; i++)
  d8:	2f 5f       	subi	r18, 0xFF	; 255
  da:	3f 4f       	sbci	r19, 0xFF	; 255
  dc:	26 17       	cp	r18, r22
  de:	37 07       	cpc	r19, r23
  e0:	b8 f3       	brcs	.-18     	; 0xd0 <Clear_Tx_Buffer+0x6>
    {
        buf[i] = 0;
    }
  e2:	08 95       	ret

000000e4 <main>:
static void Uart_Init(void);
static void Uart_Transmit(char data);
static void Uart_Transmit_Array(char *data_ptr, unsigned char length);
static void Clear_Tx_Buffer(char *buf,unsigned int length);
int main(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	c4 56       	subi	r28, 0x64	; 100
  ee:	d1 09       	sbc	r29, r1
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
    char tx_buf[100] = {0,};
  fa:	fe 01       	movw	r30, r28
  fc:	31 96       	adiw	r30, 0x01	; 1
  fe:	84 e6       	ldi	r24, 0x64	; 100
 100:	df 01       	movw	r26, r30
 102:	1d 92       	st	X+, r1
 104:	8a 95       	dec	r24
 106:	e9 f7       	brne	.-6      	; 0x102 <main+0x1e>
    Uart_Init();
 108:	0e 94 41 00 	call	0x82	; 0x82 <Uart_Init>
    while (1) 
    {
		sprintf(tx_buf,"<Uart Print Test>: \n");
 10c:	85 e1       	ldi	r24, 0x15	; 21
 10e:	e0 e6       	ldi	r30, 0x60	; 96
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	8e 01       	movw	r16, r28
 114:	0f 5f       	subi	r16, 0xFF	; 255
 116:	1f 4f       	sbci	r17, 0xFF	; 255
 118:	d8 01       	movw	r26, r16
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	8a 95       	dec	r24
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x36>
		Uart_Transmit_Array(tx_buf,strlen(tx_buf));
 122:	f8 01       	movw	r30, r16
 124:	01 90       	ld	r0, Z+
 126:	00 20       	and	r0, r0
 128:	e9 f7       	brne	.-6      	; 0x124 <main+0x40>
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	bf 01       	movw	r22, r30
 12e:	60 1b       	sub	r22, r16
 130:	71 0b       	sbc	r23, r17
 132:	c8 01       	movw	r24, r16
 134:	0e 94 4e 00 	call	0x9c	; 0x9c <Uart_Transmit_Array>
		Clear_Tx_Buffer(tx_buf,100);
 138:	64 e6       	ldi	r22, 0x64	; 100
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 65 00 	call	0xca	; 0xca <Clear_Tx_Buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	bf ef       	ldi	r27, 0xFF	; 255
 144:	2f e3       	ldi	r18, 0x3F	; 63
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	b1 50       	subi	r27, 0x01	; 1
 14a:	20 40       	sbci	r18, 0x00	; 0
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x64>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x6e>
 152:	00 00       	nop
 154:	db cf       	rjmp	.-74     	; 0x10c <main+0x28>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
